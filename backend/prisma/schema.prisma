generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// -------- ENUMS --------

enum GroupRole {
  ADMIN
  MEMBER
}

enum ProposalType {
  BUSINESS
  NON_PROFIT
  BILL
}

enum ProposalStatus {
  DRAFT
  VOTING
  APPROVED
  REJECTED
  EXECUTING
  COMPLETED
}

enum LocationScope {
  LOCAL
  CONSTITUENCY
  COUNTY
  NATIONAL
}

enum HolderType {
  USER
  GROUP
}

enum ProjectStatus {
  ACTIVE
  COMPLETED
  ON_HOLD
  CANCELLED
}

enum ParticipantRole {
  MEMBER
  ADMIN
}

enum MilestoneStatus {
  PENDING
  UNDER_REVIEW
  APPROVED
  REJECTED
}

enum GroupStatus {
  PENDING
  ACTIVE
  REJECTED
}

/// -------- MODELS --------

model User {
  id                 String   @id @default(uuid()) @db.Uuid
  walletAddress      String   @unique
  email              String   @unique
  name               String
  phoneNumber        String? 
  constituencyOrigin String
  countyOrigin       String
  constituencyLive   String
  countyLive         String
  industry           String?
  goodsServices      String[]

  nonce              String 

  groups              GroupMember[]
  proposals           Proposal[]           @relation("UserProposals")
  impactPoints        ImpactPoint[]        @relation("UserImpactPoints")
  tokenBalances       TokenBalance[]       @relation("UserTokenBalances")
  projectParticipants ProjectParticipant[] @relation("UserProjectParticipants")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Group {
  id               String   @id @default(uuid()) @db.Uuid
  name             String   @unique
  description      String?
  walletAddress    String   @unique
  constituency     String
  county           String
  industryFocus    String
  productsServices String[]

  status GroupStatus @default(PENDING)

  members       GroupMember[]
  proposals     Proposal[]     @relation("GroupProposals")
  impactPoints  ImpactPoint[]  @relation("GroupImpactPoints")
  tokenBalances TokenBalance[] @relation("GroupTokenBalances")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model GroupMember {
  id       String    @id @default(uuid()) @db.Uuid
  user     User      @relation(fields: [userId], references: [id])
  userId   String    @db.Uuid
  group    Group     @relation(fields: [groupId], references: [id])
  groupId  String    @db.Uuid
  role     GroupRole @default(MEMBER)
  joinedAt DateTime  @default(now())
  active   Boolean   @default(true)

  @@unique([userId, groupId])
}

model County {
  id             String         @id @default(uuid()) @db.Uuid
  name           String         @unique
  constituencies Constituency[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Constituency {
  id       String @id @default(uuid()) @db.Uuid
  name     String
  county   County @relation(fields: [countyId], references: [id])
  countyId String @db.Uuid

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name, countyId])
}

model Proposal {
  id             String         @id @default(uuid()) @db.Uuid
  title          String
  description    String
  proposalType   ProposalType
  funded         Boolean
  budget         Int?
  timeline       String?
  locationScope  LocationScope
  constituency   String?
  county         String?
  isPrivate      Boolean        @default(false)
  purposeDetails Json?
  status         ProposalStatus @default(DRAFT)

  creatorUserId  String? @db.Uuid
  creatorGroupId String? @db.Uuid

  creatorUser  User?  @relation("UserProposals", fields: [creatorUserId], references: [id])
  creatorGroup Group? @relation("GroupProposals", fields: [creatorGroupId], references: [id])

  project Project? @relation("ProposalToProject")

  votes Vote[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Vote {
  id          String   @id @default(uuid()) @db.Uuid
  proposalId  String   @db.Uuid
  voterId     String   @db.Uuid
  isGroup     Boolean
  vote        Boolean
  tokensSpent Int
  createdAt   DateTime @default(now())

  proposal Proposal @relation(fields: [proposalId], references: [id])

  @@index([proposalId])
}

model ImpactPoint {
  id            String         @id @default(uuid()) @db.Uuid
  holderType    HolderType
  userId        String?        @db.Uuid
  groupId       String?        @db.Uuid
  points        Int            @default(0)
  locationScope LocationScope?
  constituency  String?
  county        String?
  updatedAt     DateTime       @updatedAt

  user  User?  @relation(fields: [userId], references: [id], name: "UserImpactPoints")
  group Group? @relation(fields: [groupId], references: [id], name: "GroupImpactPoints")

  @@unique([holderType, userId, locationScope], name: "holderType_userId_locationScope")
  @@unique([holderType, groupId, locationScope], name: "holderType_groupId_locationScope")
}

model TokenBalance {
  id         String   @id @default(uuid())
  holderType HolderType
  userId     String?  @db.Uuid
  groupId    String?  @db.Uuid
  balance    Int      @default(0)
  updatedAt  DateTime @updatedAt

  user  User?  @relation("UserTokenBalances", fields: [userId], references: [id])
  group Group? @relation("GroupTokenBalances", fields: [groupId], references: [id])

  @@unique([holderType, userId], name: "holderType_userId")  // Unique for USERs
  @@unique([holderType, groupId], name: "holderType_groupId") // Unique for GROUPs
}

model Project {
  id            String        @id @default(uuid()) @db.Uuid
  proposalId    String        @unique @db.Uuid
  title         String
  description   String
  budget        Int?
  timeline      String?
  status        ProjectStatus @default(ACTIVE)
  locationScope LocationScope
  constituency  String?
  county        String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  proposal     Proposal             @relation("ProposalToProject", fields: [proposalId], references: [id])
  participants ProjectParticipant[]
  milestones   ProjectMilestone[]
}

model ProjectParticipant {
  id          String          @id @default(uuid()) @db.Uuid
  project     Project         @relation(fields: [projectId], references: [id])
  projectId   String          @db.Uuid
  participant User            @relation(fields: [userId], references: [id], name: "UserProjectParticipants")
  userId      String          @db.Uuid
  role        ParticipantRole @default(MEMBER)
  joinedAt    DateTime        @default(now())

  @@unique([projectId, userId])
}

model ProjectMilestone {
  id            String          @id @default(uuid()) @db.Uuid
  project       Project         @relation(fields: [projectId], references: [id])
  projectId     String          @db.Uuid
  title         String
  description   String
  dueDate       DateTime?
  status        MilestoneStatus @default(PENDING)
  fundingAmount Int
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}